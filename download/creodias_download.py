import requests
from tqdm import tqdm
import re
import sys
# Python file with credentials (username and password) to CREODIAS platform
import download.creodias_credentials as cc
import os
import zipfile
import pathlib
import json

# Parent directory
PDP = pathlib.Path(__file__).parents[0]
# Directory for nc files. In this case, external drive (D:) was used.
# Please specify path to folder, where files should be downloaded.
DAT_DIR = pathlib.Path('D:/Lisbon_2019/')

"""
Script borrowed from below url:
https://creodias.eu/forum/-/message_boards/message/154531
"""

# API url generated by CREODIAS EO Finder tool. To run a script, please update this variable with REST query from EO Finder.
# Please remember to change "maxRecords" parameter inside finder_api_url if more than 10 data files were found!
finder_api_url = '''
https://finder.creodias.eu/resto/api/collections/Sentinel5P/search.json?maxRecords=10&startDate=2022-12-01T00%3A00%3A00Z&completionDate=2022-12-01T23%3A59%3A59Z&processingLevel=LEVEL2&productType=L2__O3____&geometry=POLYGON((-9.5361328125+37.79242240798855%2C-7.789306640625+37.79242240798855%2C-7.789306640625+39.55911824217185%2C-9.5361328125+39.55911824217185%2C-9.5361328125+37.79242240798855))&sortParam=startDate&sortOrder=descending&status=all&dataset=ESA-DATASET
'''

def get_keycloak_token():
    '''
    This function returns API authorization token for CREODIAS platform.
    Please update password and username variable with your credentials.
    '''
    h = {
    'Content-Type': 'application/x-www-form-urlencoded'
    }
    d = {
    'client_id': 'CLOUDFERRO_PUBLIC',
    'password': cc.password,
    'username': cc.username,
    'grant_type': 'password'
    }
    resp = requests.post('https://auth.creodias.eu/auth/realms/dias/protocol/openid-connect/token', data=d, headers=h)
    try:
        token = json.loads(resp.content.decode('utf-8'))['access_token']
    except KeyError:
        print("Can't obtain a token (check username/password), exiting.")
        sys.exit()
    return token

def downloadS5PO3():
    '''This function downloads files from CREODIAS platofrm and unzipping them to specified folder (DAT_DIR)'''
    # Get response from server
    response = requests.get(finder_api_url)
    # If everything went OK start downloading and unzipping procedure
    if response.status_code == 200:
        for feature in json.loads(response.content.decode('utf-8'))['features']:
            token = get_keycloak_token()
            download_url = feature['properties']['services']['download']['url']
            download_url = download_url + '?token=' + token
            total_size = feature['properties']['services']['download']['size']
            title = feature['properties']['title']
            filename = title + '.zip'
            r = requests.get(download_url, stream=True)
            if "Content-Disposition" in r.headers.keys():
                filename = re.findall("filename=(.+)", r.headers["Content-Disposition"])[0]
            # Total size in bytes.
            total_size = int(r.headers.get('content-length', 0))
            if total_size <= 100:
                print(r.text)
                sys.exit("Please try again in few moments.")
            print(total_size)
            block_size = 1024 #1 Kibibyte
            print('downloading:', filename)
            t=tqdm(total=total_size, unit='iB', unit_scale=True)
            with open(filename, 'wb') as f:
                for data in r.iter_content(block_size):
                    t.update(len(data))
                    f.write(data)
            t.close()
            if total_size != 0 and t.n != total_size:
                print("ERROR, something went wrong")
            # Unziping dir, take only NC file and remove zip folder
            ncFile = title + '/' + title + '.nc'
            with zipfile.ZipFile(filename) as z:
                with open(DAT_DIR.joinpath(title+'.nc'), 'wb') as f:
                    f.write(z.read(ncFile))
                    f.close()
                z.close()
            os.remove(filename)
        # If something went wrong, throw an error with status code retrieved from server
        else:
            raise ValueError(f"Cannot retrieve files from CREODIAS. API call status code is: {response.status_code}.")


if __name__ == "__main__":
    resp = requests.get(finder_api_url)
    if resp.status_code == 200:
        print("Everything is correct. Can access EO data")
    else:
        raise ValueError(f"Something went wrong. Cannot access EO data. API call status call is: {resp.status_code}")






